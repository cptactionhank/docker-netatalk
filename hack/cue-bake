#!/usr/bin/env bash
set -o errexit -o errtrace -o functrace -o nounset -o pipefail

# shellcheck source=/dev/null
root="$(cd "$(dirname "${BASH_SOURCE[0]:-$PWD}")" 2>/dev/null 1>&2 && pwd)/../"

setup::cue(){
  if ! command -v cue; then
    case $(uname) in
      "Darwin")
        if command -v brew; then
          echo "You miss the cue binary. We can install that for you using brew. Press enter if you want that, CTRL+C otherwise."
          read -r
          brew install cue
        fi
      ;;
    esac
    echo "You need to install cue on your system: https://cuelang.org/docs/install/"
    return 1
  fi
}

setup::docker(){
  if ! command -v docker; then
    echo "You need to install docker on your system"
    return 1
  fi

}

setup::buildctl(){
  if ! command -v buildctl; then
    case $(uname) in
      "Darwin")
        if command -v brew; then
          echo "You miss the buildctl binary. We can install that for you using brew. Press enter if you want that, CTRL+C otherwise."
          read -r
          brew install buildkit
        fi
      ;;
    esac
    echo "You need to install buildctl on your system: https://github.com/moby/buildkit#quick-start"
    return 1
  fi
}

setup::buildkit(){
  docker inspect buildkit-cue-bake 1>/dev/null 2>&1 || \
    docker run --name buildkit-cue-bake --rm -d --privileged -p 4242:4242 moby/buildkit --addr tcp://0.0.0.0:4242
}

# Automated metadata
LICENSE="$(head -n 1 "$root/LICENSE")"

# https://tools.ietf.org/html/rfc3339
# XXX it doesn't seem like BSD date can format the timezone appropriately according to RFC3339 - eg: %:z doesn't work and %z misses the colon, so the gymnastic here
# This is date now
#DATE="$(date +%Y-%m-%dT%T%z | sed -E 's/([0-9]{2})([0-9]{2})$/\1:\2/')"
# This is last commit date - a much better date actually...
DATE="$(date -r "$(git -C "$root" log -1 --format="%at")" +%Y-%m-%dT%T%z 2>/dev/null || date --date="@$(git -C "$root" log -1 --format="%at")" +%Y-%m-%dT%T%z | sed -E 's/([0-9]{2})([0-9]{2})$/\1:\2/')"

VERSION="$(git -C "$root" describe --match 'v[0-9]*' --dirty='.m' --always)"
REVISION="$(git -C "$root" rev-parse HEAD)$(if ! git -C "$root" diff --no-ext-diff --quiet --exit-code; then printf ".m\\n"; fi)"
# XXX this is dirty, resolve ssh aliasing to github by default
URL="$(git -C "$root" remote show -n origin | grep "Fetch URL")"
URL="${URL#*Fetch URL: }"
URL="$(printf "%s" "$URL" | sed -E 's,.git$,,' | sed -E 's,^[a-z-]+:([^/]),https://github.com/\1,')"

export BUILD_LICENSES="$LICENSE"
export BUILD_CREATED="$DATE"
export BUILD_VERSION="$VERSION"
export BUILD_REVISION="$REVISION"
export BUILD_URL="$URL"

case "${1:-}" in
  "--help")
    echo "help?"
    exit
  ;;
  "init")
    setup::cue
    setup::docker
    setup::buildctl
  ;;
  *)
    target="${1:-default}"
    shift || true
    # Setup buildkitd container optionally
    if [ ! "${BUILDKIT_HOST:-}" ]; then
      BUILDKIT_HOST=tcp://0.0.0.0:4242
      setup::buildkit > /dev/null
    fi
    export BUILDKIT_HOST

    cd "$root"
    com="BUILDKIT_HOST=$BUILDKIT_HOST cue "$@" "$target" "$root/hack/frontends/bake_tool.cue" "$root/hack/frontends/dbdbdp_tool.cue" "$root/bake_tool.cue""
    >&2 printf "Debug, will do: %s\n" "$com"
    cue "$@" "$target" "$root/hack/frontends/bake_tool.cue" "$root/hack/frontends/dbdbdp_tool.cue" "$root/bake_tool.cue" || {
      cd - > /dev/null
      echo "Execution failure"
      exit 1
    }
    cd - > /dev/null
  ;;
esac
